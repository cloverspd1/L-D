<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/css/main.css" rel="stylesheet">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/css/dataTables.bootstrap.min.css"
      rel="stylesheet">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/css/responsive.bootstrap.min.css"
      rel="stylesheet">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/css/responsive.bootstrap.min.css"
      rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-timepicker/0.5.2/css/bootstrap-timepicker.min.css"
      rel="stylesheet">
<link href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/css/custom.css" rel="stylesheet">
<link rel="stylesheet" href="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/css/datepicker.min.css" />
<!--<script type="text/javascript" src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/js/bootstrap-datepicker.min.js"></script>-->
<style>
    .errorBorder-color {
        padding: 0px !important;
        color: red;
        font-size: 19px;
        margin-left: 33px;
    }

    .btn-primary {
        color: #fff !important;
        background-color: #337ab7 !important;
        border-color: #2e6da4 !important;
    }

    .btn {
        display: inline-block;
        padding: 6px 12px !important;
        margin-bottom: 0 !important;
        font-size: 14px !important;
        font-weight: 400;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: none;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .requiredfieldsstyle {
        padding-left: 15px !important;
        font-size: 12px;
        font-style: italic;
    }
</style>

<!--Program Name model dialoguebox Start-->
<div class="col-md-12 margin-top-10 padding-0">
    <div class="col-md-12 padding-0 page-content-header-style-1">
        <h1 style="font-size:25px !Important;;margin-left: 10px !Important;margin-right: 0px !Important;margin-top: 0px !Important; margin-bottom: 0px !Important;">
            <b>Non-Induction Feedback Weightage</b>
        </h1>
    </div>
    <div class="col-md-12 padding-0">
        <div class="col-md-12 padding-0 margin-top-15">
            <div id="divErrorMessage" class="errorBorder-color"></div>
        </div>
        <div class="col-md-12 padding-0 margin-top-15">
            <div id="divErrorMessage" class="errorBorder-color"></div>
        </div>
        <div class="col-md-12 margin-top-15">
            <label>
                Program Name<b><span style="color:red;font-size:20px">*</span></b>
            </label>
            <div id="divProgramName">
            </div>
        </div>
        <div class="col-md-12 margin-top-15 padding-0">
            <div class="col-md-4">
                <label>
                    Program Start Date
                </label>
                <input type="text" id="txtProgramStartDate" class="form-control" readonly="readonly" />
            </div>
            <div class="col-md-4">
                <label>
                    Program End Date
                </label>
                <input type="text" id="txtProgramEndDate" class="form-control" readonly="readonly" />
            </div>
            <div class="col-md-4">
                <label>
                    Program Location
                </label>
                <input id="txtProgramLocation" class="form-control " readonly="readonly" />
            </div>
        </div>

    </div>
    <div class="col-md-12 margin-top-15 padding-0">
        <div class="col-md-4">
            <label>
                Speaker Name
            </label>
            <input type="text" id="txtSpeakerName" maxlength="50" class="form-control RequiredField " readonly="readonly" />
        </div>
    </div>
    <div class="clear">
    </div>
    <div class="well margin-top-15">

        <div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q1 . Was the Program objective covered by the Trainer?<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                <div class="col-md-5 clsProgramObj">
                    <input type="text" id="txtProgramObj" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        <div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q2 . Did the Trainer demonstrate a good understanding of the content and techniques?<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                <div class="col-md-5 clsTrainDemons">

                    <input type="text" id="txtTrainDemons" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        <div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q3 . Did the Trainer encourage participation?<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                <div class="col-md-5 clsTrainEncg">

                    <input type="text" id="txtTrainEncg" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        <div class="col-md-12 margin-top-15">
        
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q4 . Was the trainer responsive towards the questions?<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                <div class="col-md-5 clsTrainerResp">

                    <input type="text" id="txtTrainerResp" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        <div class="col-md-12 margin-top-15">
        <br/><br/>
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q5 . Is the Course content useful and relevant to your current job role?<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                <div class="col-md-5 clsCourseCont">

                    <input type="text" id="txtCourseCont" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        <div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q6 . Did the course material complement well with the course content?<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                <div class="col-md-5 clsCourseMat">

                    <input type="text" id="txtCourseMat" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        
        <div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q7 . Were the exercises & activities conducted during the session able to provide a clearer understanding of the course?<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                <div class="col-md-5 clsCourseUndt">

                    <input type="text" id="txtCourseUndt" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        
        <div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q8 . Was the time allocated to the training appropriate as per the content?<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                <div class="col-md-5 clsTimeAlloctd">

                    <input type="text" id="txtTimeAlloctd" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        
        
        <div class="col-md-12 margin-top-15">
        <br/><br/>
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">Q9 . Were you satisfied with the facilities at the venue:<b><span style="color:red;font-size:20px">*</span></b></label>
                </div>
                </div>
                </div>
                
                <div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a) Location</label>
                </div>
                <div class="col-md-5 clsFacilitiesLoc">

                    <input type="text" id="txtFacilitiesLoc" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        
        <div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b) Ambience</label>
                </div>
                <div class="col-md-5 clsFacilitiesAmb">

                    <input type="text" id="txtFacilitiesAmb" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>

		<div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c) Food</label>
                </div>
                <div class="col-md-5 clsFacilitiesFood">

                    <input type="text" id="txtFacilitiesFood" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>

<div class="col-md-12 margin-top-15">
            <div class="col-md-12 border-style-1">
                <div class="col-md-7">
                    <label class="margin-bottom-0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d) Stay</label>
                </div>
                <div class="col-md-5 clsFacilitiesStay">

                    <input type="text" id="txtFacilitiesStay" class="form-control RequiredField clearTextboxData allownumericwithoutdecimal" maxlength="10" />
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear">
    </div>
    <div class=" col-md-12 padding-0 margin-top-10">
        <div id="divFeedBackSpeakerErrors" class="requiredfieldsstyle"></div>
        <div class="clear">
        </div>
    </div>
    <div class="col-md-12 margin-top-10">
        <input type="button" class="btn btn-primary" id="btnProgramWeightAge" value="Insert WeightAge" style="display:none"/>
        <input type="button" class="btn btn-primary" id="btnWeightAgeUpdate" value="Update WeightAge" style="display:none" />
    </div>
</div>

<div id="throbber" style="display:none;">
<img src="https://bajajelect.sharepoint.com/sites/HR-TrainingManagementSystem/SiteAssets/AnugamStyles/img/712_1.gif" /><br/></br><h3><b style="color:#0072c6 !Important;font-size:32px">Please Wait...</b><h3></div>

<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/jquery.dataTables.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/dataTables.bootstrap.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/dataTables.responsive.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/responsive.bootstrap.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datatable/js/datatables.scroller.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/js/moment.min.js"></script>
<script src="/sites/Anugamdev/SiteAssets/AnugamStyles/Datepicker/js/daterangepicker.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-timepicker/0.5.2/js/bootstrap-timepicker.js"></script>
<script src="https://bajajelect.sharepoint.com/sites/AnugamUAT/SiteAssets/Webparts/alluploadreferences/jquery.blockUI.js"></script>
<!-- bootstrap-daterangepicker -->
<script>
    $(document).ready(function () {
    
   
        PopulateProgramDropDown();

    });

    function PopulateProgramDropDown() {
        var listName = "NewInductionProgram";
        var url = _spPageContextInfo.webAbsoluteUrl;
        var UserEmail = LoginUserEmail();
        getProgram(UserEmail, listName, url, function (data) {
        
         $.blockUI.defaults.css = {		
											padding: 0,		
								            margin: 0,		
								            width: '30%',		
								            top: '40%',		
								            left: '35%',		
								            textAlign: 'center',
								            cursor: 'wait'};
								            
		       $.blockUI.defaults.overlayCSS.backgroundColor = '#fff';
		       $.blockUI.defaults.overlayCSS.opacity = 0.9;
		       $.blockUI.defaults.overlayCSS.cursor = 'pointer';


		       $.blockUI({message: $('#throbber')});
                
                       setTimeout(function () {
                       
            var TodayDate = new Date();
            var day = TodayDate.getDate();
            var mm = TodayDate.getMonth() + 1;
            var Year = TodayDate.getFullYear();
            var items = data.d.results;
            var pgmFinalData = []; var j = 0;
            var arrPGM = [];
            var arrPGMUnique = [];
            for (var k = 0; k < items.length; k++) {
                var ChkProgramEndDate = new Date(items[k].ProgramEndDate.split("/").reverse().join("-"));
                if (new Date(items[k].ProgramEndDate.split("/").reverse().join("-")) <= TodayDate || ChkProgramEndDate.setHours(0, 0, 0, 0) == TodayDate.setHours(0, 0, 0, 0)) {
                    var NameProgram = items[k].ProgramName;
                    var ChckCnclPgm = items[k].ProgramName;
	                var PrgrmCancellation = GetPgmCncld(ChckCnclPgm);
	                if(PrgrmCancellation != 'Yes')
                	{

                    if (pgmFinalData[j++] != NameProgram) {
                        pgmFinalData[j++] = NameProgram;
                    }
                    
                    }
                }
            }
            var uniqueProgramNames = '';
            var result = [];
            $.each(pgmFinalData, function (index, pgmFinalData) {
                if ($.inArray(pgmFinalData, result) == -1) {
                    result.push(pgmFinalData);
                }
            });
            console.log(ChkProgramEndDate);
            //var programBind = GroupByProgramData(pgmFinalData, 'ProgramName');
            var inputElement = '<select id="ddlProgramName" class="form-control RequiredField"><option  value="--Select Program--">--Select Program--</option>';
            // Add all the new items
            for (var i = 0; i < result.length; i++) {
                if (result[i] != undefined) {
                    var itemId = result[i],
                        itemVal = result[i];
                    inputElement += '<option value="' + itemVal + '"selected>' + itemId + '</option>';
                }
            }
            inputElement += '</select>';
            $('#divProgramName').append(inputElement);
            $("#ddlProgramName").each(function () {
                $('option', this).each(function () {

                    if ($(this).text() == '--Select Program--') {
                        $(this).attr('selected', 'selected')
                    };
                });
            });
            $('#ddlProgramName').on('change', function () {
                var selectedProgramName = $(this).val();
                $("#txtProgramLocation").val('');
                $("#txtProgramStartDate").val('');
                $("#txtProgramEndDate").val('');
                $('#txtSpeakerName').val('');
                
               var alreadyExisit2 = getWieghtageValues();
                var UpdateID1='';
                if (alreadyExisit2.length > 0) {

                 UpdateID1= alreadyExisit2[0].WeightID;
                $('#txtProgramObj').val(alreadyExisit2[0].ProgramObj);
                    $('#txtTrainDemons').val(alreadyExisit2[0].TrainDemons);
                    $('#txtTrainEncg').val(alreadyExisit2[0].TrainEncg);
                    $('#txtTrainerResp').val(alreadyExisit2[0].TrainerResp);
                    $('#txtCourseCont').val(alreadyExisit2[0].CourseCont);
                    $('#txtCourseMat').val(alreadyExisit2[0].CourseMat);
                    $('#txtCourseUndt').val(alreadyExisit2[0].CourseUndt);
                    $('#txtTimeAlloctd').val(alreadyExisit2[0].TimeAlloctd);
                    $('#txtFacilitiesLoc').val(alreadyExisit2[0].FacilitiesLoc);
                    $('#txtFacilitiesAmb').val(alreadyExisit2[0].FacilitiesAmb);
                    $('#txtFacilitiesFood').val(alreadyExisit2[0].FacilitiesFood);
                    $('#txtFacilitiesStay').val(alreadyExisit2[0].FacilitiesStay);
					}

                getProgramLocation(selectedProgramName);
                var SpeakerName = getSpeakerName(selectedProgramName);
                if (SpeakerName != '' && SpeakerName != null) {
                    $('#txtSpeakerName').val(SpeakerName);
                }
                var alreadyExisit = getExisitanceFromWeightAge(selectedProgramName, SpeakerName);
                var UpdateID='';
                if (alreadyExisit.length > 0) {
                    UpdateID = alreadyExisit[0].WeightID;
                    $('#txtProgramObj').val(alreadyExisit[0].ProgramObj);
                    $('#txtTrainDemons').val(alreadyExisit[0].TrainDemons);
                    $('#txtTrainEncg').val(alreadyExisit[0].TrainEncg);
                    $('#txtTrainerResp').val(alreadyExisit[0].TrainerResp);
                    $('#txtCourseCont').val(alreadyExisit[0].CourseCont);
                    $('#txtCourseMat').val(alreadyExisit[0].CourseMat);
                    $('#txtCourseUndt').val(alreadyExisit[0].CourseUndt);
                    $('#txtTimeAlloctd').val(alreadyExisit[0].TimeAlloctd);
                    $('#txtFacilitiesLoc').val(alreadyExisit[0].FacilitiesLoc);
                    $('#txtFacilitiesAmb').val(alreadyExisit[0].FacilitiesAmb);
                    $('#txtFacilitiesFood').val(alreadyExisit[0].FacilitiesFood);
                    $('#txtFacilitiesStay').val(alreadyExisit[0].FacilitiesStay);

                    $('#btnProgramWeightAge').hide();
                    $('#btnWeightAgeUpdate').show();
                    $('#btnWeightAgeUpdate').click(function () {
                        if (UpdateID != '' && isValidData()) {
                            UpdateWeightDetils(UpdateID);
                        }
                    });
                }
                else {
                    $('#btnWeightAgeUpdate').hide();
                    $('#btnProgramWeightAge').show();
                    $('#btnProgramWeightAge').click(function () {
                        $('#txtProgramObj').val();
                        $('#txtTrainDemons').val();
                        $('#txtTrainEncg').val();
                        $('#txtTrainerResp').val();
                        $('#txtCourseCont').val();
                        $('#txtCourseMat').val();
                        $('#txtCourseUndt').val();
                        $('#txtTimeAlloctd').val();
                        $('#txtFacilitiesLoc').val();
                        $('#txtFacilitiesAmb').val();
                        $('#txtFacilitiesFood').val();
                        $('#txtFacilitiesStay').val();

                        if (isValidData()) {
                            InsertWeightDetails();
                        }
                    });
                }
            });
            
                     $.unblockUI({
                    onUnblock: function () {
                        console.log('');
                    }
                });
            }, 600);


        }, function (data) {
            alert("An error occured while getting ConfigParameters. Please try again");
        });
    }
    
    function getWieghtageValues()
    {
     var exists = false;
        var WeightAgeID = ""; var pushExistingValues = [];
        var RestUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/web/lists/getbytitle('Non-InductionWeightageMasters')/items";
        $.ajax({
            url: RestUrl,
            method: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
            },
            success: function (d) {
                if (d.d.results.length > 0) {
                    exists = true;
                    pushExistingValues.push({
                        WeightID:d.d.results[0].ID,
                        ProgramObj:d.d.results[0].ProgramObj,
                        TrainDemons:d.d.results[0].TrainDemons,
                        TrainEncg:d.d.results[0].TrainEncg,
                        TrainerResp:d.d.results[0].TrainerResp,
                        CourseCont:d.d.results[0].CourseCont,
                        CourseMat:d.d.results[0].CourseMat,
                        CourseUndt:d.d.results[0].CourseUndt,
                        TimeAlloctd:d.d.results[0].TimeAlloctd,
                        FacilitiesLoc:d.d.results[0].FacilitiesLoc,
                        FacilitiesAmb:d.d.results[0].FacilitiesAmb,
                        FacilitiesFood:d.d.results[0].FacilitiesFood,
                        FacilitiesStay:d.d.results[0].FacilitiesStay

                    });
                }
            },
            error: function () { console.log('fail'); }
        });
        return pushExistingValues;

    }
    
    function getExisitanceFromWeightAge(ProgramName, SpeakerName) {
        var exists = false;
        var WeightAgeID = ""; var pushExistingValues = [];
        var RestUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/web/lists/getbytitle('OverAllProgramWeightAge')/items?$filter=Status%20eq%20%27Active%27and%20ProgramName%20eq%20%27" + ProgramName + "%27 and SpeakerName eq '" + SpeakerName + "'";
        $.ajax({
            url: RestUrl,
            method: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
            },
            success: function (d) {
                if (d.d.results.length > 0) {
                    exists = true;
                    pushExistingValues.push({
                        WeightID:d.d.results[0].ID,
                        ProgramObj:d.d.results[0].ProgramObj,
                        TrainDemons:d.d.results[0].TrainDemons,
                        TrainEncg:d.d.results[0].TrainEncg,
                        TrainerResp:d.d.results[0].TrainerResp,
                        CourseCont:d.d.results[0].CourseCont,
                        CourseMat:d.d.results[0].CourseMat,
                        CourseUndt:d.d.results[0].CourseUndt,
                        TimeAlloctd:d.d.results[0].TimeAlloctd,
                        FacilitiesLoc:d.d.results[0].FacilitiesLoc,
                        FacilitiesAmb:d.d.results[0].FacilitiesAmb,
                        FacilitiesFood:d.d.results[0].FacilitiesFood,
                        FacilitiesStay:d.d.results[0].FacilitiesStay
                    });
                }
            },
            error: function () { console.log('fail'); }
        });
        return pushExistingValues;
    }
    function getSpeakerName(ProgramName) {
        var SpeakerName = '';
        var Spkr='';
        var RestUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/web/lists/getbytitle('NewInductionProgram')/items?$filter=Status%20eq%20%27Active%27and%20ProgramName%20eq%20%27" + ProgramName + "%27 and FeedBackNeed eq 'Yes'";
        $.ajax({
            url: RestUrl,
            method: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
            },
            success: function (d) {
                var arr = [];
                i = 0;
                $.each(d.d.results, function (index, results) {
                    arr[i++] = index;
                });
                for (var k = 0; k < arr.length; k++) {
                    var arrK = arr[k];
                    if (d.d.results[arrK].ProgramName == ProgramName) {
                        var ActivityID = d.d.results[arrK].ActivityID;
                        SpeakerName = getSpeakerNameOnActivityID(ActivityID);
                       
                        Spkr= Spkr + SpeakerName + ",";
                        //alert(Spkr);
                    }
                }
                if(Spkr != '')
                {
                var lastChar = Spkr.slice(-1);
                if (lastChar == ',') {
                SpeakerName = Spkr.slice(0, -1);
                }
                //alert(SpeakerName);
                }

            },
            error: function () { console.log('fail'); }
        });
        return SpeakerName;
    }
    function getSpeakerNameOnActivityID(ActivityID) {
   
        var SpeakerName ='';
   
        var RestUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/web/lists/getbytitle('FeedBackDetails')/items?$filter=ActiviTyID eq '" + ActivityID + "'";
        $.ajax({
            url: RestUrl,
            method: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
            },
            success: function (d) {

                    
                 var arr = [];
            i = 0;
            $.each(d.d.results, function (index, results) {
                if (results.Status == "Active") {
                    arr[i++] = index;
                }
            });

              for (var j = 0; j < arr.length; j++) {
                   var arrConfigK = arr[j];
                    if(arrConfigK<=0){
                       SpeakerName = d.d.results[arrConfigK].NameOfTheSpeaker + ",";
                    }
                    else if(arrConfigK>=1){
                       SpeakerName = SpeakerName + d.d.results[arrConfigK].NameOfTheSpeaker + ",";
                    }
              }
               var lastChar = SpeakerName.slice(-1);
                if (lastChar == ',') {
                SpeakerName = SpeakerName.slice(0, -1);
                }
                
                //var Speaker1=SpeakerName;
                

               // if (d.d.results.length > 0) {
                //    SpeakerName = d.d.results[0].NameOfTheSpeaker;
               // }
            },
            error: function () { console.log('fail'); }
        });
        return SpeakerName;
    }
    function getProgram(UserEmail, listName, siteurl, success, failure) {

        var urlTest = siteurl + "/_vti_bin/listdata.svc/" + listName + "?$filter=CreatedByUser eq %27" + UserEmail + "%27 and Status eq 'Active' and FeedBackNeed eq 'Yes' and InductionProgram eq 'No'&$orderby= Created desc";
        $.ajax({
            url: urlTest,
            method: "GET",
            headers: { "Accept": "application/json; odata=verbose" },
            success: function (data) {
                success(data);
            },
            error: function (data) {
                failure(data);
            }
        });
    }
    function getProgramLocation(selectedProgramName) {
        var RestUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/web/lists/getbytitle('NewInductionProgram')/items?$filter=Status%20eq%20%27Active%27and%20ProgramName%20eq%20%27" + selectedProgramName + "%27";
        $.ajax({
            url: RestUrl,
            method: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
            },
            success: function (d) {
                var arr = [];
                i = 0;
                $.each(d.d.results, function (index, results) {
                    arr[i++] = index;
                });
                for (var k = 0; k < arr.length; k++) {
                    var arrK = arr[k];
                    if (d.d.results[arrK].ProgramName == selectedProgramName) {
                        var PgrmLocation = d.d.results[arrK].ProgramLocation;
                        var PgrmStartDate = d.d.results[arrK].ProgramStartDate;
                        var PgrmEndDate = d.d.results[arrK].ProgramEndDate;
                        $("#txtProgramLocation").val(PgrmLocation);
                        $("#txtProgramStartDate").val(PgrmStartDate);
                        $("#txtProgramEndDate").val(PgrmEndDate);
                        break;
                    }
                }
            },
            error: function () { console.log('fail'); }
        });
    }
</script>
<script>
    var currentuserEmailID = "";
    function LoginUserEmail() {
        $.ajax({
            async: false,
            url: _spPageContextInfo.webServerRelativeUrl +
                 "//_api/SP.UserProfiles.PeopleManager/GetMyProperties?$select=email",
            method: "GET",
            headers: {
                "accept": "application/json;odata=verbose"
            },
            success: function (d) {
                currentuserEmailID = d.d.Email;

            },
            error: function (err) {
                alert(JSON.stringify(err));
            }
        });
        return currentuserEmailID;
    }
</script>
<script>
    function InsertWeightDetails() {
        var ProgramName = $("#ddlProgramName").val();
        var ProgramStartDate = $("#txtProgramStartDate").val();
        var ProgramEndDate = $("#txtProgramEndDate").val();
        var ProgramLocation = $("#txtProgramLocation").val();

        var ProgramObj = parseFloat($("#txtProgramObj").val());
        var TrainDemons = parseFloat($("#txtTrainDemons").val());
        var TrainEncg = parseFloat($("#txtTrainEncg").val());
        var TrainerResp = parseFloat($("#txtTrainerResp").val());

        var CourseCont = parseFloat($("#txtCourseCont").val());
        var CourseMat = parseFloat($("#txtCourseMat").val());
        var CourseUndt = parseFloat($("#txtCourseUndt").val());
        var TimeAlloctd = parseFloat($("#txtTimeAlloctd").val());
        
        var FacilitiesLoc = parseFloat($("#txtFacilitiesLoc").val());
        var FacilitiesAmb = parseFloat($("#txtFacilitiesAmb").val());
        var FacilitiesFood = parseFloat($("#txtFacilitiesFood").val());
        var FacilitiesStay = parseFloat($("#txtFacilitiesStay").val());

        var SpeakerName = $("#txtSpeakerName").val();
        var CurrentLoginUser = LoginUserEmail();
        
        var TrainerSummary = parseFloat(ProgramObj + TrainDemons + TrainEncg + TrainerResp).toFixed(2);
        var ProgramSummary = parseFloat(CourseCont + CourseMat + CourseUndt + TimeAlloctd).toFixed(2);
        var VenueSummary = parseFloat(FacilitiesLoc + FacilitiesAmb + FacilitiesFood + FacilitiesStay).toFixed(2);

        
        var TotWeightage= parseFloat(parseFloat(TrainerSummary) + parseFloat(ProgramSummary) + parseFloat(VenueSummary)).toFixed(2);
        if(TotWeightage == 100.00)
        {
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('OverAllProgramWeightAge')/items",
            type: "POST",
            async: false,
            data: JSON.stringify({
                '__metadata': { 'type': 'SP.Data.OverAllProgramWeightAgeListItem' },
                'Title': ProgramName,
                'ProgramName': ProgramName,
                'ProgramStartDate': ProgramStartDate,
                'ProgramEndDate': ProgramEndDate,
                'ProgramLocation': ProgramLocation,

                'ProgramObj': ProgramObj,
                'TrainDemons': TrainDemons,
                'TrainEncg': TrainEncg,
                'TrainerResp': TrainerResp,
                'TrainerSummary' : TrainerSummary,

                'CourseCont': CourseCont,
                'CourseMat': CourseMat,
                'CourseUndt': CourseUndt,
                'TimeAlloctd': TimeAlloctd,
                'NewProgramSummary': ProgramSummary,

                'FacilitiesLoc': FacilitiesLoc,
                'FacilitiesAmb': FacilitiesAmb,
                'FacilitiesFood': FacilitiesFood,
                'FacilitiesStay': FacilitiesStay,
                'VenueSummary': VenueSummary,

                'SpeakerName': SpeakerName,

                'Status': "Active",
                'CreatedByUser': CurrentLoginUser,

            }),
            headers: {
                "Accept": "application/json;odata=verbose",
                "content-type": "application/json; odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val(),
            },
            success: function (data) {
                alert("Program weightage inserted successfully");
                window.location.reload();
                //$('.clearTextboxData').each(function () {
                //    $(this).val('');
                //});
            },
            error: function (err) {
                alert("Error while adding item: " + JSON.stringify(err));
            }
        });
        }
        else
        {
        alert("Overall weightage should be the sum of only 100"); 
        }
    }
    function isValidData() {
        var isValid = true;
        $('.RequiredField').each(function () {
            if ($.trim($(this).val()) == '' || $.trim($(this).val()) == '--Select Program--' || $.trim($(this).val()) == '0') {
                isValid = false;
                $(this).css({
                    "border": "1px solid red"
                });
            }
            else {
                $(this).css({
                    "border": ""
                });
            }
        });
        if (isValid == false) {
            $('#divFeedBackSpeakerErrors').empty();
            $('#divFeedBackSpeakerErrors').css('color', 'red');
            $('#divFeedBackSpeakerErrors').append("Highlighted fields are mandatory");
        }
        else {
            $('#divFeedBackSpeakerErrors').css('color', '');
            $('#divFeedBackSpeakerErrors').empty();
        }
        return isValid;
    }
    $('.RequiredField').change(function () {
        if (this.valueOf() != '') {
            $(this).css({
                "border": ""
            });
        }
    });
    $(".allownumericwithoutdecimal").on("keypress keyup blur", function (event) {
        $(this).val($(this).val().replace(/[^\d].+/, ""));
        if ((event.which < 48 || event.which > 57)) {
            event.preventDefault();
        }
    });
   
    function UpdateWeightDetils(UpdateID) {
        var ProgramName = $("#ddlProgramName").val();
        var ProgramStartDate = $("#txtProgramStartDate").val();
        var ProgramEndDate = $("#txtProgramEndDate").val();
        var ProgramLocation = $("#txtProgramLocation").val();

        var ProgramObj = parseFloat($("#txtProgramObj").val());
        var TrainDemons = parseFloat($("#txtTrainDemons").val());
        var TrainEncg = parseFloat($("#txtTrainEncg").val());
        var TrainerResp = parseFloat($("#txtTrainerResp").val());

        var CourseCont = parseFloat($("#txtCourseCont").val());
        var CourseMat = parseFloat($("#txtCourseMat").val());
        var CourseUndt = parseFloat($("#txtCourseUndt").val());
        var TimeAlloctd = parseFloat($("#txtTimeAlloctd").val());
        
        var FacilitiesLoc = parseFloat($("#txtFacilitiesLoc").val());
        var FacilitiesAmb = parseFloat($("#txtFacilitiesAmb").val());
        var FacilitiesFood = parseFloat($("#txtFacilitiesFood").val());
        var FacilitiesStay = parseFloat($("#txtFacilitiesStay").val());
         
        var SpeakerName = $("#txtSpeakerName").val();
        var CurrentLoginUser = LoginUserEmail();
        
        var TrainerSummary = parseFloat(ProgramObj + TrainDemons + TrainEncg + TrainerResp).toFixed(2);
        var ProgramSummary = parseFloat(CourseCont + CourseMat + CourseUndt + TimeAlloctd).toFixed(2);
        var VenueSummary = parseFloat(FacilitiesLoc + FacilitiesAmb + FacilitiesFood + FacilitiesStay).toFixed(2);

        
        var TotWeightage= parseFloat(parseFloat(TrainerSummary) + parseFloat(ProgramSummary) + parseFloat(VenueSummary)).toFixed(2);
        
if(TotWeightage == 100.00)
{
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getByTitle('OverAllProgramWeightAge')/items(" + UpdateID + ")",
            type: "POST",
            data: JSON.stringify({
                '__metadata': { 'type': 'SP.Data.OverAllProgramWeightAgeListItem' },
                'Title': ProgramName,
                'ProgramName': ProgramName,
                'ProgramStartDate': ProgramStartDate,
                'ProgramEndDate': ProgramEndDate,
                'ProgramLocation': ProgramLocation,

                'ProgramObj': ProgramObj,
                'TrainDemons': TrainDemons,
                'TrainEncg': TrainEncg,
                'TrainerResp': TrainerResp,
                'TrainerSummary' : TrainerSummary,

                'CourseCont': CourseCont,
                'CourseMat': CourseMat,
                'CourseUndt': CourseUndt,
                'TimeAlloctd': TimeAlloctd,
                'NewProgramSummary': ProgramSummary,

                'FacilitiesLoc': FacilitiesLoc,
                'FacilitiesAmb': FacilitiesAmb,
                'FacilitiesFood': FacilitiesFood,
                'FacilitiesStay': FacilitiesStay,
                'VenueSummary': VenueSummary,


                'SpeakerName': SpeakerName,

                'Status': "Active",
                'CreatedByUser': CurrentLoginUser,

            }),
            headers: {
                "Accept": "application/json;odata=verbose",
                "content-type": "application/json; odata=verbose",
                "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                "X-HTTP-Method": "MERGE",
                "If-Match": "*"
            },
            success: function (data) {
                alert('Weightage details updated succesfully');
                $('.clearTextboxData').each(function () {
                    $(this).val('');
                });
            },
            error: function (err) {
                alert("Error while adding item: " + JSON.stringify(err));
            }
        });
        }
        else
        {
        alert("Overall weightage should be the sum of only 100");
        }
    }
    
    function GetPgmCncld(ChckCnclPgm) {
     
        var IsProgramCancelled = "";

        var RestUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/web/lists/getbytitle('ProgramMaster')/items?$filter=Title%20eq%20%27" + ChckCnclPgm + "%27";
        $.ajax({
            url: RestUrl,
            method: "GET",
            async: false,
            headers: {
                "accept": "application/json;odata=verbose",
            },
            success: function (d) {
                  if (d.d.results.length > 0) {
                  var arr = [];
                  i = 0;
                  $.each(d.d.results, function (index, results) {
                  arr[i++] = index;
                  });
	              for (var k = 0; k < arr.length; k++) {
	              var arrK = arr[k];
				  IsProgramCancelled = d.d.results[arrK].IsProgramCancelled;
	              }
                }
                else
                {
                IsProgramCancelled = 0;
               }
            },
            error: function () { console.log('fail'); }
        });
        return IsProgramCancelled;
    }
</script>